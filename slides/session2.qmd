---
title: "Intro to Geospatial Vector Data with R"
author: "Claudiu Forgaci"
format: 
  revealjs:
    # logo: assets/img/TUDelft_logo_rgb.png
    # css: logo.css
    footer: "Data Carpentry for Geospatial Data"
    chalkboard: true
    incremental: true   
    theme: [default, custom.scss]
---


```{r}
#| label: setup
#| include: false

library(tidyverse)
library(here)
library(sf)

boundary_Delft <- st_read(here("data", "delft-boundary.shp"))
lines_Delft <- st_read(here("data", "delft-streets.shp"))
point_Delft <- st_read(here("data", "delft-leisure.shp"))

road_types <- c("motorway", "primary", "secondary", "cycleway")
road_colors <- c("blue", "green", "navy", "purple")

municipal_boundary_NL <- st_read(here("data","nl-gemeenten.shp"))
country_boundary_NL <- st_read(here("data", "nl-boundary.shp"))

lines_Delft_selection <- lines_Delft %>% 
  filter(highway %in% road_types) %>% 
  mutate(highway = factor(highway, levels = road_types))

knitr::opts_chunk$set(
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE,
  error = FALSE
  )
```


## `sf` package for spatial vector data

![](https://user-images.githubusercontent.com/520851/50280460-e35c1880-044c-11e9-9ed7-cc46754e49db.jpg){fig-align="center"}

## `sf` package for spatial vector data

- `sf` provides [simple features access](https://en.wikipedia.org/wiki/Simple_Features) to R
- represents simple features as records in a `data.frame` or `tibble` with a `geometry` column
- function names start with a prefix `st_` ("st" stands for spatial type), which is also handy for auto-completion in RStudio

# Open and Plot Shapefiles

## Challenge 1: `r emo::ji("clock")` **5 mins**

Read in `delft-streets.shp` and `delft-leisure.shp` and call them `lines_Delft` and `point_Delft` respectively.

Answer the following questions:

1. What type of R spatial object is created when you import each layer?
2. What is the CRS and extent for each object?
3. Do the files contain points, lines, or polygons?
4. How many spatial objects are in each file?

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
``` 

. . .

```{r}
#| label: ch-1
#| eval: false
#| include: false

lines_Delft <- st_read(here("data", "delft-streets.shp"))
point_Delft <- st_read(here("data", "delft-leisure.shp"))

class(lines_Delft)
class(point_Delft)

st_crs(lines_Delft)
st_crs(point_Delft)

st_bbox(lines_Delft)
st_bbox(point_Delft)
```

# Explore and plot by vector layer attributes

## Challenge 2: `r emo::ji("clock")` **3 mins**

Explore the attributes associated with the `point_Delft` and `boundary_Delft` spatial objects.

1. How many attributes does each have?
2. What types of leisure points do the points represent? Give three examples.
3. Which of the following is NOT an attribute of the point_Delft data object?

. . . 

&#8291;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A) location B) leisure C) osm_id

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 3)
``` 
<!-- **Hint:**  -->

. . .

```{r}
#| label: ch-2
#| eval: false
#| include: false

ncol(point_Delft)
ncol(boundary_Delft)

head(point_Delft)
head(point_Delft, 10)

point_Delft

names(point_Delft)
```

## Challenge 3: `r emo::ji("clock")` **7 mins**

1. Create a new object that only contains the motorways in Delft. 
2. How many features does the new object have?
3. What is the total length of motorways?
4. Plot the motorways.
5. Extra: follow the same steps with pedestrian streets. 

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 7)
``` 
. . . 

```{r}
#| label: ch-3
#| eval: false
#| include: false

levels(factor(lines_Delft$highway))

motorway_Delft <- lines_Delft %>% 
  filter(highway == "motorway")

motorway_Delft %>% 
  mutate(length = st_length(.)) %>% 
  select(everything(), geometry) %>%
  summarise(total_length = sum(length))

nrow(motorway_Delft)

ggplot(data = motorway_Delft) +
  geom_sf(size = 1.5) +
  ggtitle("Mobility network of Delft", subtitle = "Motorways") +
  coord_sf()

pedestrian_Delft <- lines_Delft %>% 
  filter(highway == "pedestrian")

nrow(pedestrian_Delft)

ggplot(data = pedestrian_Delft) +
  geom_sf() +
  ggtitle("Slow mobility network of Delft", subtitle = "Pedestrian") +
  coord_sf()
```

## Challenge 4: `r emo::ji("clock")` **3 mins**

In the previous example, we set the line widths to be 1, 0.75, 0.5, and 0.25. In our case line thicknesses are consistent with the hierarchy of the selected road types, but in some cases we might want to show a different hierarchy.

Letâ€™s create another plot where we show the different line types with the following thicknesses:

- motorways size = 0.25
- primary size = 0.75
- secondary size =  0.5
- cycleway size = 1

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 3)
``` 
. . . 

```{r}
#| label: ch-4
#| eval: false
#| include: false

levels(factor(lines_Delft$highway))

line_widths <- c(0.25, 0.75, 0.5, 1)

ggplot(data = lines_Delft_selection) +
  geom_sf(aes(size = highway)) +
  scale_size_manual(values = line_widths) +
  labs(size = "Road Size") +
  ggtitle("Mobility network of Delft", subtitle = "Roads & Cycleways - Line width varies") +
  coord_sf()
```

## Challenge 5: `r emo::ji("clock")` **5 mins**

Create a plot that emphasizes only roads where bicycles are allowed, as follows: 

- make the lines where bicycles are not allowed THINNER than the roads where bicycles are allowed. 
- Be sure to add a title and legend to your map. 
- You might consider a color palette that has all bike-friendly roads displayed in a bright color. All other lines can be black.

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
``` 
. . . 

```{r}
#| label: ch-5
#| eval: false
#| include: false

class(lines_Delft_selection$highway)

levels(factor(lines_Delft_selection$highway))

lines_Delft_bicycle <- lines_Delft %>% 
  filter(highway == "cycleway")

ggplot() +
  geom_sf(data = lines_Delft) +
  geom_sf(data = lines_Delft_bicycle, color = "magenta", size = 2) +
  ggtitle("Mobility network of Delft", subtitle = "Roads dedicated to bikes") +
  coord_sf()
```

## Challenge 6: `r emo::ji("clock")` **5 mins**

Create a map of the municipal boundaries in the Netherlands, as follows:

- Use the data located in your data folder: `nl-gemeenten.shp`. 
- Apply a line color to each state using its region value. 
- Add a legend.

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
``` 
. . . 

```{r}
#| label: ch-6
#| eval: false
#| include: false

municipal_boundaries_NL <- st_read(here("data", "nl-gemeenten.shp"))
str(municipal_boundaries_NL)
levels(factor(municipal_boundaries_NL$ligtInPr_1))

ggplot(data = municipal_boundaries_NL) +
  geom_sf(aes(color = ligtInPr_1), size = 1) +
  ggtitle("Contiguous NL Municipal Boundaries") +
  coord_sf()
```

# Plot multiple shapefiles

## Challenge 7: `r emo::ji("clock")` **5 mins**

Create a map of leisure locations only including `playground` and `picnic_table`:

- color each point by the leisure type. 
- Overlay this layer on top of the `lines_Delft` layer (the streets). 
- Create a custom legend that applies line symbols to lines and point symbols to the points.

- Extra: Modify the previous plot. Tell R to plot each point, using a different symbol of shape value.

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
``` 
. . . 

```{r}
#| label: ch-7
#| eval: false
#| include: false

leisure_locations_selection <- st_read(here("data", "delft-leisure.shp")) %>% 
  filter(leisure %in% c("playground", "picnic_table"))

levels(factor(leisure_locations_selection$leisure))

blue_orange <- c("cornflowerblue", "darkorange")

ggplot() + 
  geom_sf(data = lines_Delft_selection, aes(color = highway)) + 
  geom_sf(data = leisure_locations_selection, aes(fill = leisure), 
          shape = 21, show.legend = 'point') + 
  scale_color_manual(name = "Line Type", values = road_colors,
                     guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) + 
  scale_fill_manual(name = "Soil Type", values = blue_orange,
                    guide = guide_legend(override.aes = list(linetype = "blank", shape = 21, colour = NA))) + 
  ggtitle("Traffic and leisure") + 
  coord_sf()

ggplot() + 
  geom_sf(data = lines_Delft_selection, aes(color = highway), size = 1) + 
  geom_sf(data = leisure_locations_selection, aes(fill = leisure, shape = leisure), size = 3) + 
  scale_shape_manual(name = "Leisure Type", values = c(21, 22)) +
  scale_color_manual(name = "Line Type", values = road_colors) + 
  scale_fill_manual(name = "Leisure Type", values = rainbow(15),
                    guide = guide_legend(override.aes = list(linetype = "blank", shape = c(21, 22),
                                                             color = "black"))) + 
  ggtitle("Road network and leisure") + 
  coord_sf()
```

# Handle spatial projections

## Challenge 8: `r emo::ji("clock")` **5 mins**

Create a map of the South Holland, as follows:

1. Import `nl-gemeenten.shp` and filter only the municipalities in South Holland. 
2. Plot it and adjust line width as necessary.
3. Layer the boundary of Delft onto the plot.
4. Add a title.
5. Add a legend that shows both the province boundaries (as a line) and the boundary of Delft (as a filled polygon).

``` {r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
``` 
. . . 

```{r}
#| label: ch-8
#| eval: false
#| include: false

boundary_ZH <- municipal_boundary_NL %>% 
  filter(ligtInPr_1 == "Zuid-Holland")

ggplot() +
  geom_sf(data = boundary_ZH, aes(color ="color"), show.legend = "line") +
  scale_color_manual(name = "", labels = "Municipal Boundaries", values = c("color" = "gray18")) +
  geom_sf(data = boundary_Delft, aes(shape = "shape"), color = "purple", fill = "purple") +
  scale_shape_manual(name = "", labels = "Municipality of Delft", values = c("shape" = 19)) +
  ggtitle("Delft location in South Holland") +
  theme(legend.background = element_rect(color = NA)) +
  coord_sf()
```

